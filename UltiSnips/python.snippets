snippet imp
import ${1: module}
endsnippet

# Module Docstring
snippet docs
'''
File: ${1:`Filename('$1.py', 'foo.py')`}
Author: ${2:`g:snips_author`}
Description: ${3}
'''
endsnippet

snippet wh
while ${1: condition}:
  ${2:  # code...}
endsnippet

snippet for
for ${1: needle} in ${2: haystack}:
  ${3:  # code...}
endsnippet

# New Class
snippet cl
class ${1: ClassName}(${2: object}):
  """${3:docstring for $1}"""
  def __init__(self, ${4: arg}):
    ${5: super($1, self).__init__()}
    self.$4 = $4
    ${6}
endsnippet

# New Function
snippet def
def ${1: fname}(${2: `indent('.') ? 'self': ''`}):
  """${3:docstring for $1}"""
  ${4: pass}
endsnippet

snippet deff
def ${1: fname}(${2: `indent('.') ? 'self': ''`}):
  ${3}
endsnippet

# New Method
snippet defs
def ${1: mname}(self, ${2: arg}):
  ${3: pass}
endsnippet

# New Property
snippet prop
def ${1: foo}():
  doc = "${2:The $1 property.}"
  def fget(self):
    ${3: return self._$1}
  def fset(self, value):
    ${4: self._$1 = value}
endsnippet

# Lambda
snippet ld
${1: var} = lambda ${2: vars}: ${3: action}
endsnippet

snippet .
self.
endsnippet


snippet try
try:
  ${1: pass}
except ${2: Exception}, ${3: e}:
  ${4: raise $3}
finally:
  ${5: pass}
endsnippet

snippet tryf
try:
  ${1: pass}
except ${2: Exception}, ${3: e}:
  ${4: raise $3}
else:
  ${5: pass}
finally:
  ${6: pass}
endsnippet

# if __name__ == '__main__':
snippet ifmain
if __name__ == '__main__':
  ${1: main()}
endsnippet

# __magic__
snippet _
__${1: init}__${2}
endsnippet

# custom snippets start here:
snippet flaskapp
# pylint: disable=C0103
"""Flask App"""
from flask import Flask
app = Flask(__name__)
app.config.from_object(__name__)

@app.route("/")
def hello():
  """def Hellow world"""
  ${1}
  return "Hello World!"

if __name__ == '__main__':
    app.run()
endsnippet

snippet classname
self.__class__.__name__
endsnippet

snippet __i
def __init__(self):
  super(${1: classname}, self).__init__()
endsnippet

snippet pdb
import pdb; pdb.set_trace()
endsnippet


snippet peewee
from peewee import *

db = SqliteDatabase('${1}.db')

class ${2}(Model):
  ${3}
  name = CharField()

  class Meta:
      database = db  # This model uses the "people.db" database.

db.connect()
db.create_tables([${2}])

endsnippet


snippet peefkf
  ${1} = ForeignKeyField(${2}, related_name='${3}')
endsnippet

snippet peecf
  ${1} = CharField()
endsnippet

snippet peedf
  ${1} = DateField()
endsnippet

snippet peebf
  ${1}= BooleanField()
endsnippet

snippet peeget
${1} = ${2}.get(${3}.name == '${4}')
endsnippet


snippet peeselect
for ${1} in ${2}.select():
  print(${3}.name, ${4}.is_relative)
endsnippet

snippet peegetwhere
  query = ${1}.select().where(${2}.${3} == '${4}')
endsnippet

snippet peeflask
from flask import Flask
# flask-peewee bindings
from flask_peewee.db import Database
# configure our database
DATABASE = {
    'name': 'example.db',
    'engine': 'peewee.SqliteDatabase',
}
DEBUG = True
SECRET_KEY = 'ssshhhh'

app = Flask(__name__)
app.config.from_object(__name__)

# instantiate the db wrapper
db = Database(app)

if __name__ == '__main__':
    app.run()
endsnippet


snippet peerest
from flask_peewee.rest import RestAPI
from app import app  # our project's Flask app

# create a RestAPI container
api = RestAPI(app)
# register the model
api.register(ModelName)

api.setup()
endsnippet
